import copy

from NumUtils import NumUtils
from OneDHWT import OneDHWT

### Module: OneDHWTTests.py
### Author: vladimir kulyukin

class OneDHWTTests:

    @staticmethod
    def testOrdFHWT(signal):
        print('Original signal: %s' % str(signal))
        OneDHWT.ordFHWT(signal)
        print('Ord FHWT       : %s' % str(signal))

    @staticmethod
    def testOrdFHWTForNumIters(signal): 
        n = NumUtils.intLog2(len(signal))
        print('n = %d' % n)
        copy_signal = copy.deepcopy(signal)
        for i in xrange(1, n):
            print('num iters %d' % i)
            print('Original: %s' % str(signal))
            OneDHWT.ordFHWTForNumIters(signal, i)
            print('Transformed: %s' % str(signal))
            OneDHWT.orderedInvFHWTForNumIters(signal, i)
            print('Reversed: %s' % str(signal))
            for j in xrange(len(signal)):
                if signal[j] != copy_signal[j]: 
                     print('FALSE')
                     return
        print('TRUE')

    @staticmethod
    def testOrdInvFHWT(signal):
        n = NumUtils.intLog2(len(signal))
        orig_signal = copy.deepcopy(signal)
        print('n = %d' % n)
        print('signal: %s' % str(signal))
        OneDHWT.ordFHWT(signal)
        print('OneDHWT: %s' % str(signal))
        OneDHWT.ordInvFHWT(signal)
        print('OneInvDHWT: %s' % str(signal))
        rslt = NumUtils.areEqualLists(signal, orig_signal)
        print('signal equality: %s' % str(rslt))
        return rslt

    @staticmethod
    def testOrdInvFHWTForNumItersGivenNumFwdIters(signal, num_fwd_iters, num_inv_iters):
        if num_inv_iters > num_fwd_iters:
            raise Exception('num_inv_iters > num_fwd_iters')
        num_avail_iters = NumUtils.intLog2(len(signal))
        if num_inv_iters > num_avail_iters:
            raise Exception('num_inv_iters > num_avail_iters')
        orig_signal = copy.deepcopy(signal)
        sig_copy    = copy.deepcopy(signal)
        print('num_fwd_iters = %d' % num_fwd_iters)
        print('num_inv_iters  = %d' % num_inv_iters)
        OneDHWT.ordFHWTForNumIters(signal, num_fwd_iters)
        OneDHWT.ordFHWTForNumIters(sig_copy, num_fwd_iters - num_inv_iters) 
        OneDHWT.ordInvFHWTForNumItersGivenNumFwdIters(signal, num_fwd_iters, num_inv_iters)
        rslt = NumUtils.areEqualLists(signal, sig_copy)
        print(signal)
        print(sig_copy)
        print('signal equality: %s' % str(rslt))
        return rslt
        
    ## Examples from Ch. 1 in Nievergelt's "Wavelets Made Easy"
    @staticmethod
    def ex_1_15_p10():
        signal = [9, 1]
        OneDHWTTests.testOrdFHWT(signal)

    @staticmethod
    def ex_1_3_2_4_p11(): 
        signal = [5, 1, 2, 8]
        OneDHWTTests.testOrdFHWT(signal)

    @staticmethod
    def ex_1_12_p19():
        signal = [3, 1, 0, 4, 8, 6, 9, 9]
        OneDHWTTests.testOrdFHWT(signal)
    
    @staticmethod
    def ex_1_16_p20(): 
        signal = [1, 7]
        OneDHWTTests.testOrdFHWT(signal)
     
    @staticmethod
    def ex_1_17_p21():
        signal = [2, 4, 8, 6]
        OneDHWTTests.testOrdFHWT(signal)

    @staticmethod 
    def ex_1_18_p21(): 
        signal = [5, 7, 3, 1]
        OneDHWTTests.testOrdFHWT(signal)

    @staticmethod 
    def ex_1_19_p21(): 
        signal = [8, 6, 7, 3, 1, 1, 2, 4]
        OneDHWTTests.testOrdFHWT(signal)

    #This is the temperature example discussed in class
    @staticmethod
    def ex_1_47_p33():
        signal = [22.0, 27.0, 48.8, 47.5, 47.0, 48.5, 48.0, 47.0, 43.0, 41.0, 41.0, 38.0, 36.0, 47.1, 34.0, 32.0]
        OneDHWTTests.testOrdFHWT(signal)

    @staticmethod
    def ex_set():
        signal = [22.0, 27.0, 48.8, 47.5, 47.0, 48.5, 48.0, 47.0, 43.0, 41.0, 41.0, 38.0, 36.0, 47.1, 34.0, 32.0]
        print('Original signal: %s' % str(signal))
        OneDHWT.ordFHWT(signal)
        print('Ord FHWT       : %s' % str(signal))
        OneDHWTTests.print_analysis(signal, "depth", "cm")

    @staticmethod
    def data_set_1():
        signal = [10.0, 12.0, 12.0, 7.0, 8.0, 9.1, 8.2, 9.4, 16.0, 15.0, 13.0, 11.0, 6.4, 9.0, 19.0, 118.0]
        print('Original signal: %s' % str(signal))
        OneDHWT.ordFHWT(signal)
        print('Ord FHWT       : %s' % str(signal))
        OneDHWTTests.print_analysis(signal, "flow", "ft^3/s")

    @staticmethod
    def data_set_2():
        signal = [32.5,32.5,32.937,33.312,33.125,33.312,33.375,33.625,33.687,33.75,34.0,34.187,34.0,33.875,34.062,34.187,34.187,34.187,34.062,33.812,33.875,33.937,34.25,34.437,34.75,35.187,35.375,35.375,35.187,34.875,35.0,35.062,34.937,35.0,34.875,35.062,35.125,35.125,35.375,35.5,35.312,35.687,35.437,35.062,35.0,34.625,33.875,33.0,32.187,31.5,30.937,30.625,30.5,30.125,29.75,29.75,29.875,29.75,29.562,29.312,29.062,28.812,28.562,28.5,28.437,28.687,28.562,28.312,28.0,27.937,27.812,27.625,27.437,27.437,27.25,27.0,26.875,26.812,26.625,26.625,26.5,26.25,26.187,26.125,25.812,25.625,25.625,25.687,25.687,25.75,25.687,25.687,25.875,25.5,25.312,25.312,25.062,24.937,24.625,24.687,24.562,24.437,24.5,24.437,24.312,24.062,24.0,23.75,23.437,23.437,23.375,23.437,23.625,23.5,23.625,23.812,24.0,24.187,24.375,24.5,24.562,24.875,25.125,25.25,25.312,25.5,25.625,25.937,26.312,26.562,26.625,26.875,27.125,27.187,27.375,27.75,27.937,28.312,28.562,28.937,29.25,29.625,30.125,30.125,31.0,31.312,31.625,32.0,32.437,32.687,32.687,33.0,33.375,33.5,33.625,33.875,33.937,33.875,33.812,33.562,33.875,33.875,33.875,34.062,34.375,34.25,34.375,34.5,34.5,34.937,35.187,35.125,35.125,35.312,35.375,35.5,35.0,35.0,35.0,35.25,34.75,35.062,35.062,35.312,34.937,35.062,35.0,35.125,34.812,34.312,33.562,32.5,31.937,31.125,30.5,30.125,29.812,29.687,29.562,29.562,29.5,29.437,29.812,29.875,29.687,29.5,29.312,29.187,29.0,28.75,28.562,28.5,28.375,28.25,28.312,28.125,28.0,27.75,27.562,27.437,27.25,27.25,27.125,27.125,26.812,26.875,26.562,26.437,26.25,26.0,25.812,25.75,25.625,25.562,25.437,25.312,25.187,25.25,25.187,25.187,25.0,25.0,24.812,24.75,24.812,24.937,24.812,24.625,24.437,24.625,24.25,24.125,24.062,23.937,23.875,23.812,23.812,23.812,23.875,23.937,24.437,24.437,24.625,24.625,25.062,25.312,25.562,25.75,25.75,26.062,26.437,26.625,27.25,27.437,27.375,27.812,28.0,28.187,28.375,28.812,28.75,29.125,29.187,29.437,29.437,29.875,30.375,30.5,30.937,31.312,31.687,32.187,32.437,32.5,32.687,32.687,32.75,33.062,33.25,33.5,33.625,33.312,33.437,33.625,33.5,33.562,33.5,33.75,33.75,34.25,34.5,34.437,34.437,35.125,34.75,34.937,34.437,34.437,34.75,35.0,35.062,35.375,34.875,34.75,34.187,34.187,34.375,34.187,34.437,34.125,34.437,34.375,34.625,34.312,33.625,32.75,31.875,31.25,30.312,29.812,29.312,28.812,28.687,28.562,28.562,28.562,28.562,28.187,28.187,28.0,27.875,27.812,27.937,27.75,27.375,27.187,27.125,27.062,26.812,26.875,27.375,27.625,27.687,27.437,27.25,27.0,26.937,26.625,26.75,26.687,26.562,26.375,26.437,26.437,26.25,26.125,26.125,26.187,26.062,25.937,25.687,25.625,25.375,25.312,25.187,25.25,25.062,25.125,24.937,24.812,24.812,24.437,24.375,24.187,24.375,23.937,24.187,24.0,24.125,24.062,24.0,23.875,23.937,24.062,24.312,24.437,24.437,24.375,24.812,24.812,25.25,25.437,25.75,26.0,26.312,26.625,26.625,26.875,27.312,27.375,27.75,28.062,28.375,28.625,28.937,29.25,29.437,29.625,29.875,30.062,30.437,30.687,31.187,31.75,31.687,32.125,32.375,32.562,32.75,33.0,33.375,33.25,33.437,33.562,33.625,33.875,34.0,33.937,33.875,33.812,33.75,34.0,34.375,34.187,34.312,34.437,34.5,35.187,35.25,35.312,35.125,35.0,35.187,34.812,34.75,34.812,34.937,35.062,34.375,34.937,34.937,35.187,34.875,34.625,34.062,33.875,34.0,34.0,33.687,32.312,31.75,31.125,30.437,30.0,29.625,29.125,28.812,28.687,28.687,28.687,28.562,28.5,28.062,28.0,28.187,28.0,28.0,27.937,27.812,27.875,27.75,27.562,27.625,27.625,27.437,27.625,27.437,27.312,27.187,27.0,27.0,26.875,26.75,26.812,26.812,26.625,26.562,26.312,26.375,26.187,26.25,26.187,26.0,25.687,25.687,25.812,25.562,25.437,25.187,25.062,24.812,24.812,24.812,24.812,24.687,24.562,24.187,24.312,24.25,24.25,24.312,24.312,24.375,24.312,24.5,24.562,24.5,24.562,24.625,24.687,25.0,25.375,25.937,26.25,26.562,26.625,26.812,27.125,27.187,27.437,27.937,28.375,28.562,28.875,29.125,29.375,29.25,29.125,28.875,28.562,28.5,28.875,29.312,29.812,30.062,30.375,30.25,30.125,30.5,30.625,30.687,30.812,31.187,31.687,32.125,32.437,32.937,33.375,33.437,33.937,34.125,34.125,34.0,33.937,34.125,34.375,34.312,34.125,34.437,34.5,35.125,35.125,34.937,35.125,35.437,34.687,33.875,33.312,33.062,32.875,32.687,32.437,32.937,33.625,33.562,33.375,33.375,32.812,32.125,32.125,31.312,30.812,30.812,30.312,29.937,29.687,29.687,29.75,29.75,29.5,29.312,29.375,29.437,29.375,29.312,29.437,29.687,29.625,29.5,29.375,29.25,29.125,29.375,29.312,29.312,29.312,29.25,29.125,29.0,28.937,28.812,28.75,28.5,28.5,28.25,28.125,28.0,27.75,27.562,27.437,27.125,26.937,26.812,26.875,26.875,26.75,26.75,26.687,26.625,26.562,26.625,26.5,26.437,26.5,26.5,26.437,26.375,26.312,26.062,25.875,25.75,25.812,25.875,25.875,25.937,25.937,26.0,26.125,26.25,26.375,26.5,26.375,26.312,26.437,26.562,26.625,26.812,26.937,27.187,27.312,27.562,27.875,28.25,28.562,28.75,29.187,29.187,29.562,29.937,30.187,30.5,30.937,31.125,31.125,31.187,31.187,31.625,31.75,32.125,32.437,32.75,32.625,32.812,33.062,33.187,33.375,33.437,33.437,33.437,33.5,33.437,33.312,33.312,33.625,33.625,34.0,33.875,33.75,33.812,33.875,34.437,34.187,34.375,34.437,35.437,35.312,35.187,34.875,34.75,35.187,34.937,34.562,34.937,35.062,34.875,34.937,35.0,34.937,35.125,34.75,34.437,34.0,34.062,33.0,32.062,31.562,31.062,30.562,30.25,29.937,29.625,29.5,29.25,28.875,28.687,28.562,28.5,28.375,28.25,28.187,27.937,27.812,27.687,27.437,27.5,27.5,27.375,27.375,27.25,27.375,27.375,27.125,27.125,27.125,27.187,27.062,27.0,26.812,26.625,26.5,26.375,26.375,26.375,26.312,26.125,26.062,26.0,25.812,25.812,25.812,25.687,25.687,25.687,25.625,25.625,25.562,25.375,25.375,25.375,25.375,25.062,24.875,24.937,24.625,24.5,24.312,24.25,24.25,24.187,24.187,24.312,24.312,24.312,24.5,24.625,24.625,24.875,24.937,25.062,25.5,25.5,25.812,25.75,25.687,26.062,26.187,26.437,26.687,26.937,27.0,27.25,27.812,28.0,28.25,28.375,28.562,28.937,29.062,29.375,29.687,30.062,30.5,30.875,31.5,31.75,32.062,32.375,32.812,32.75,33.062,33.187,33.187,33.25,33.437,33.437,33.5,33.687,34.125,33.937,34.062,33.812,33.75,33.75,34.0,34.187,34.25,34.437,34.625,34.75,34.75,35.125,35.125,35.0,34.875,34.875,34.625,34.937,35.125,35.5,35.062,34.937,34.937,35.0,34.812,34.812,34.187,33.812,33.812,33.312,32.625,32.125,31.562,30.812,30.25,29.687,29.312,29.125,28.875,28.625,28.5,28.187,28.125,28.062,27.937,27.937,28.125,27.937,27.812,27.5,27.187,27.062,26.937,26.75,26.687,26.562,26.562,26.437,26.25,26.25,26.0,26.0,25.937,25.812,25.812,25.875,25.687,25.625,25.5,25.312,25.125,24.937,24.812,24.687,24.625,24.687,24.562,24.375,24.375,24.375,24.312,24.187,24.062,23.937,24.0,23.562,23.312,23.5,23.25,23.187,23.0,22.937,22.875,22.937,22.937,22.937,23.062,23.125,23.312,23.375,23.5,23.75,23.937,24.562,24.562,24.75,25.0,25.125,25.187,25.437,25.687,25.875,26.25,26.562,26.875,27.312,27.875,28.125,28.562,28.812,29.375,29.812,30.312,30.375,30.625,30.75,31.062,31.5,31.562,31.562,32.062,32.375,32.687,32.937,33.25,33.562,33.75,34.0,34.125,34.25,34.25,34.375,34.312,34.375,34.562,34.437,34.125,34.062,34.062,34.125,34.375,34.937,35.125,35.125,35.187,34.875,34.875,34.937,35.437,34.812,35.187,35.062,35.125,35.062,35.125,35.062,35.062,35.062,35.125,34.5,33.75,33.062,33.0,33.062,32.437,31.812,31.437,31.437,30.687,30.125,29.812,29.5,29.375,29.125,28.937,28.812,28.687,28.562,28.562,28.562,28.562,28.437,28.437,28.375,28.25,28.25,28.125,28.0,28.0,28.125,28.25,28.125,28.062,28.0,27.75,27.562,27.375,27.375,27.187,27.0,26.937,26.875,26.875,27.0,27.125,27.0,26.937,27.0,27.125,27.25,27.187,27.437,27.437,27.437,27.375,27.312,27.25,27.0,26.875,26.812,26.562,26.5,26.562,26.562,26.625,26.625,26.625,26.687,26.687,26.625,26.687,26.625,26.812,26.812,26.812,26.687,27.125,27.312,27.437,27.25,27.437,27.25,27.5,27.437,27.75,27.812,28.375,28.5,28.625,28.75,28.687,28.937,29.125,29.312,29.5,29.562,29.562,29.937,30.062,30.562,30.562,31.0,31.125,31.0,31.0,31.187,31.687,32.0,32.375,32.687,33.187,32.937,32.937,33.0,33.187,33.062,33.187,33.187,33.312,33.312,33.375,33.312,33.437,33.625,33.625,34.062,34.187,34.187,34.625,34.25,34.312,34.312,34.75,34.812,34.812,34.25,34.5,34.25,34.0,33.375,32.875,32.5,32.062,31.687,31.187,30.937,30.562,30.0,29.562,28.937,28.625,28.312,27.937,27.562,26.875,26.75,26.562,26.375,26.312,26.125,26.062,25.812,25.437,25.187,25.0,24.875,24.437,24.062,23.75,23.562,23.437,23.312,23.187,23.25,23.25,23.25,23.187,23.0,22.687,22.375,22.375,22.375,22.125,21.812,21.437,21.25,21.0,20.937,20.812,20.625,20.437,20.25,20.125,20.062,20.062,19.937,20.0,20.125,20.187,20.437,20.687,20.562,20.562,20.375,20.5,20.562,20.562,20.437,20.25,20.312,19.937,19.937,19.875,19.812,19.812,19.937,20.0,20.437,20.5,20.812,21.125,21.187,21.75,21.812,21.812,21.937,22.062,22.125,22.25,22.062,22.437,22.562,22.437,22.625,22.562,22.937,23.125,23.25,23.687,23.937,24.187,24.375,24.625,25.125,25.625,26.062,26.437,27.25,28.062,28.187,28.5,28.687,28.937,29.375,29.625,30.0,30.25,30.187,30.5,30.5,31.25,32.0,31.812,31.625,32.125,32.187,32.187,32.562,32.937,33.125,33.375,33.687,33.562,33.625,33.812,34.0,34.0,33.5,33.625,33.375,33.187,33.687,33.437,33.687,33.312,33.187,32.937,32.625,32.25,31.312,30.875,30.562,30.062,29.437,28.75,28.125,27.687,27.25,26.812,26.562,26.5,26.437,26.375,26.375,26.187,25.937,26.062,26.125,26.0,26.0,25.875,25.75,25.687,25.437,25.437,25.125,25.187,25.062,24.75,24.687,24.687,24.75,24.75,24.562,24.25,24.062,24.0,23.875,24.062,24.125,24.25,24.125,24.0,23.875,23.812,23.812,23.937,23.875,23.75,23.562,23.687,23.562,23.375,23.375,23.312,23.25,23.0,23.062,23.125,23.0,23.0,23.125,23.062,23.187,23.125,23.0,23.0,22.75,22.687,22.812,23.0,23.125,23.375,23.562,23.875,24.5,24.437,24.375,24.5,24.687,24.687,24.687,24.812,25.5,25.812,26.125,26.562,26.625,27.25,27.375,27.437,27.375,27.687,27.687,28.125,28.437,29.125,29.562,29.937,30.062,30.062,30.187,30.5,30.937,31.625,31.937,32.125,32.125,32.125,31.937,31.562,31.625,31.375,31.312,31.375,31.625,31.937,32.187,32.25,31.875,31.5,30.937,30.562,30.25,30.125,30.0,30.125,29.937,29.687,29.5,29.5,29.812,30.062,30.0,30.0,29.937,29.937,29.875,29.687,29.375,29.25,29.125,28.875,28.875,28.875,28.5,28.375,28.375,27.937,27.812,27.562,27.625,27.5,27.562,27.75,27.687,27.812,27.687,27.687,27.687,27.562,27.5,27.5,27.25,27.187,27.062,26.937,26.75,26.562,26.437,26.187,26.187,26.062,25.875,25.687,25.625,25.625,25.5,25.312,25.312,25.062,24.937,24.812,24.812,24.875,24.937,24.812,24.562,24.375,24.25,24.187,24.125,24.25,24.187,24.062,23.937,23.937,23.812,23.812,23.687,23.875,23.562,24.0,23.562,23.437,23.125,23.062,22.75,22.625,22.562,22.625,22.875,22.75,22.937,22.875,22.812,23.125,23.437,23.812,24.062,24.312,24.187,24.5,24.75,24.875,24.875,25.0,25.375,25.937,26.25,26.062,26.687,26.875,27.125,27.437,27.875,28.25,28.437,28.625,28.937,29.25,29.75,30.25,30.562,30.937,31.187,31.812,32.187,32.437,32.625,32.687,33.0,32.812,32.75,32.75,32.625,32.875,33.062,33.187,33.0,33.125,33.187,33.437,33.687,33.75,33.812,33.875,33.75,34.375,34.312,34.312,34.562,34.937,35.0,34.687,34.625,34.625,35.0,34.812,34.5,34.5,34.375,34.125,34.062,33.937,33.687,33.437,33.187,33.062,32.75,32.25,31.625,31.0,30.375,29.937,29.312,29.187,29.125,29.0,28.875,28.812,28.875,28.75,28.625,28.375,28.375,28.0,27.875,27.812,27.812,27.812,27.875,27.812,27.812,27.812,27.75,27.687,27.75,27.812,27.625,27.062,26.75,26.562,26.562,26.5,26.437,26.312,26.312,26.312,26.312,26.062,26.0,25.937,26.187,26.062,26.312,26.312,26.375,26.312,26.25,26.312,26.562,26.562,26.562,26.5,26.375,26.25,26.062,26.062,25.687,25.562,25.25,25.125,24.937,24.937,25.062,25.125,25.0,25.25,25.562,25.687,25.687,26.125,26.187,26.125,26.25,26.625,26.75,26.812,26.812,27.437,27.812,28.437,29.0,29.437,30.0,30.187,30.375,30.625,30.687,30.937,31.187,31.437,31.5,31.562,31.75,32.187,32.187,32.875,33.125,33.125,33.625,33.812,34.125,34.125,33.562,33.25,33.125,33.312,33.062,33.125,33.125,33.0,33.375,33.625,33.937,34.062,34.125,34.125,33.937,33.937,34.062,34.125,34.187,34.687,35.125,34.812,34.75,34.625,34.937,34.937,34.875,34.687,34.875,34.812,34.5,34.25,33.75,33.0,32.5,32.0,32.0,32.0,31.812,31.125,30.625,30.125,29.687,28.937,28.812,28.625,28.562,28.562,28.5,28.687,28.687,28.625,28.687,28.5,28.437,28.25,28.0,27.875,27.812,27.75,27.375,27.062,26.875,26.812,26.812,26.687,26.625,26.5,26.5,26.437,26.312,26.125,26.125,26.0,25.937,25.875,25.687,25.562,25.437,25.5,25.375,25.125,25.25,25.187,25.0,24.875,24.875,24.875,24.687,24.687,24.625,24.687,24.437,24.312,24.5,24.437,24.562,24.5,24.437,24.375,24.187,24.062,23.937,23.812,23.812,23.937,23.937,23.75,23.5,23.375,23.375,23.625,23.875,24.312,24.562,24.75,24.937,25.25,25.312,25.625,25.687,25.687,25.937,26.375,26.5,26.625,26.875,26.937,27.25,27.437,27.562,27.75,28.062,28.437,29.062,29.437,29.875,30.25,30.375,31.0,31.125,31.437,31.687,31.812,32.125,32.25,32.375,32.625,32.75,32.812,32.937,33.187,33.187,33.375,33.437,33.312,33.437,33.687,33.5,33.375,33.437,33.812,33.875,33.937,34.0,34.0,34.375,35.0,34.625,34.625,34.625,34.25,34.062,34.0,33.875,33.562,33.437,33.187,32.562,32.187,31.625,31.312,31.25,30.562,30.187,29.812,29.375,29.062,28.687,28.375,28.25,28.187,27.937,27.812,27.75,27.75,27.625,27.687,27.875,27.75,27.75,27.812,27.812,27.687,27.562,27.375,27.125,26.75,26.687,26.687,26.625,26.625,26.5,26.5,26.437,26.187,26.125,26.25,26.375,26.25,26.25,26.125,25.875,25.875,25.562,25.437,25.312,25.187,25.125,24.937,25.187,25.125,24.812,24.687,24.687,24.625,24.687,24.687,24.875,24.687,24.437,24.25,24.125,24.187,24.125,24.312,24.25,24.375,24.312,24.25,24.062,24.25,24.187,24.125,23.937,24.0,24.062,24.437,24.687,24.875,24.937,25.0,25.187,25.812,25.812,25.937,26.562,26.562,27.312,27.625,27.937,28.187,28.312,28.5,28.812,29.437,29.625,29.812,30.187,30.75,30.937,31.312,31.562,31.75,32.0,32.312,32.687,32.937,32.937,33.062,33.062,33.25,33.25,33.437,33.375,33.375,33.375,33.437,33.5,33.687,33.375,33.437,33.75,33.937,33.937,34.125,34.562,34.375,34.5,34.5,34.625,34.312,34.312,33.875]
        print('Original signal: %s' % str(signal))
        OneDHWT.ordFHWT(signal)
        print('Ord FHWT       : %s' % str(signal))
        OneDHWTTests.print_analysis(signal, "temperature", "degrees Celsius")

    @staticmethod
    def print_analysis(signal, label, unit):
        unit = unit + "."
        deltas = [round(i*-2,2) for i in signal[1:]]
        print "Average:", signal[0], unit
        print "From December to January the", label, "increased" if deltas[0] > 0 else "decreased", "by", abs(deltas[0]), unit
        print "From the 1st half of December to the 2nd half of December the", label, "increased" if deltas[1] > 0 else "decreased", "by", abs(deltas[1]), unit
        print "From the 1st half of January to the 2nd half of January the", label, "increased" if deltas[2] > 0 else "decreased", "by", abs(deltas[2]), unit
        print "From the 1st quarter of December to the 2nd quarter of December, the", label, "increased" if deltas[3] > 0 else "decreased", "by", abs(deltas[3]), unit
        print "From the 3rd quarter of December to the 4th quarter of December, the", label, "increased" if deltas[4] > 0 else "decreased", "by", abs(deltas[4]), unit
        print "From the 1st quarter of January to the 2nd quarter of January, the", label, "increased" if deltas[5] > 0 else "decreased", "by", abs(deltas[5]), unit
        print "From the 3rd quarter of January to the 4th quarter of January, the", label, "increased" if deltas[6] > 0 else "decreased", "by", abs(deltas[6]), unit
        print "Weekly changes were as follows:"
        print "\tWeek 1 of December:", "an increase of" if deltas[7] > 0 else "a drop of", abs(deltas[7]), unit
        print "\tWeek 2 of December:", "an increase of" if deltas[8] > 0 else "a drop of", abs(deltas[8]), unit
        print "\tWeek 3 of December:", "an increase of" if deltas[9] > 0 else "a drop of", abs(deltas[9]), unit
        print "\tWeek 4 of December:", "an increase of" if deltas[10] > 0 else "a drop of", abs(deltas[10]), unit
        print "\tWeek 1 of January:", "an increase of" if deltas[11] > 0 else "a drop of", abs(deltas[11]), unit
        print "\tWeek 2 of January:", "an increase of" if deltas[12] > 0 else "a drop of", abs(deltas[12]), unit
        print "\tWeek 3 of January:", "an increase of" if deltas[13] > 0 else "a drop of", abs(deltas[13]), unit
        print "\tWeek 4 of January:", "an increase of" if deltas[14] > 0 else "a drop of", abs(deltas[14]), unit


if __name__ == '__main__':
   # OneDHWTTests.ex_1_15_p10()
   # OneDHWTTests.ex_1_3_2_4_p11()
   # OneDHWTTests.ex_1_12_p19()
   # OneDHWTTests.ex_1_16_p20()
   # OneDHWTTests.ex_1_19_p21()
   # OneDHWTTests.ex_1_47_p33()
   # OneDHWTTests.ex_set()
   # OneDHWTTests.data_set_1()
   OneDHWTTests.data_set_2()
   pass

